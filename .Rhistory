library(pacman)
library(c(here,tidyverse))
library(c('here','tidyverse'))
package = c('here','tidyverse')
library(package)
library(package)
library(here)
library(tidyverse)
data=read.csv(here("data/E-Scooter_Trips_-_2020.csv"))
data |> head()
data |> head()
glimpse(data)
library(here)
summary(data)
lubridate::as.duration(data$Trip.Duration)
lubridate::as.duration(as.numeric(data$Trip.Duration))
lubridate::as.duration(as.numeric(gsub(",","",data$Trip.Duration)))
gsub(",","",data$Trip.Duration) |> as.numeric() |> as.duration()
data$Trip.Duration = gsub(",","",data$Trip.Duration) |> as.numeric() |> as.duration()
data |> head()
plot(data$Trip.Distance, data$Trip.Duration)
data=read.csv(here("data/E-Scooter_Trips_-_2020.csv"))
data |> head()
data$Trip.Duration = gsub(",","",data$Trip.Duration) |>  as.duration() |> as.numeric()
library(here)
library(tidyverse)
data |> head()
data=read.csv(here("data/E-Scooter_Trips_-_2020.csv"))
data=read.csv(here("data/E-Scooter_Trips_-_2020.csv"))
data$Trip.Duration = gsub(",","",data$Trip.Duration) |> as.numeric() |>as.duration()  |> as.numeric()
data |> head()
plot(data$Trip.Distance, data$Trip.Duration)
data$Trip.Distance = gsub(",","",data$Trip.Duration) |> as.numeric()
data |> head()
data=read.csv(here("data/E-Scooter_Trips_-_2020.csv"))
data$Trip.Duration = gsub(",","",data$Trip.Duration) |> as.numeric() |>as.duration()  |> as.numeric()
data$Trip.Distance = gsub(",","",data$Trip.Distance) |> as.numeric()
plot(data$Trip.Distance, data$Trip.Duration)
plot(data$Trip.Duration, data$Trip.Distance)
data |> head()
data=read.csv(here("data/E-Scooter_Trips_-_2020.csv"))
data$Trip.Duration = gsub(",","",data$Trip.Duration) |> as.numeric() |>as.duration()  |> as.numeric()
data$Trip.Distance = gsub(",","",data$Trip.Distance) |> as.numeric()
data |> head()
plot(data$Trip.Duration, data$Trip.Distance)
plot(data$Trip.Duration, data$Trip.Distance, xlim = (0, 12000))
plot(data$Trip.Duration, data$Trip.Distance, xlim = c(0,12000))
lm(Trip.Duration ~Trip.Distance, data=data)
lm(Trip.Duration ~Trip.Distance, data=data) |> plot()
summary(data)
table(data$Vendor)
data |>
group_by(Vendor, Trip.Duration,Trip.Distance) |>
summarise(meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance))
data |>
group_by(Vendor) |>
summarise(meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance))
data |>
group_by(Vendor) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance))
data |>
group_by(Vendor) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
ggplot(aes(x=Vendor)) +
geom_col(aes(y=total,fill=Vendor))
data |>
group_by(Vendor) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
ggplot(aes(x=Vendor)) +
geom_col(aes(y=total,fill=Vendor)) +
geom_point(aes(y=meanDuration))
data |>
group_by(Vendor) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
ggplot(aes(x=Vendor)) +
geom_col(aes(y=total,fill=Vendor)) +
geom_point(aes(y=meanDistance))
data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor))
data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) |>
geom_boxplot()
data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot()
data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot() +
xlim(0,50000)
data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot() +
scale_y_continuous(limits = c(0,50000))
data |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance))
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance))
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
sort(decreasing = False)
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
sort(decreasing = F)
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
order()
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total))
library(flextable)
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
flextable()
source("D:/Romario/Programar/Ferramentas/R/Projetos/Datasets/Kaggle_E-Scooters_Trips/script/intro.R", echo=TRUE)
saveRDS(data,file=here('objects/dataset.R'))
data |>
group_by(Vendor) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
ggplot(aes(x=Vendor)) +
geom_col(aes(y=total,fill=Vendor)) +
geom_point(aes(y=meanDistance))
total_for_vendor= data |>
group_by(Vendor) |>
summarise(total=n()) |>
ggplot(aes(x=Vendor)) +
geom_col(aes(y=total,fill=Vendor))
ggsave(filename = "total_vendor_bar", plot=total_for_vendor,path=here('graphics'))
ggsave(filename = "total_vendor_bar.png", plot=total_for_vendor,path=here('graphics'))
# Dataviz --------------------------------------------------------
data = readRDS(here('objects/dataset.R'))
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot() +
scale_y_continuous(limits = c(0,50000))
View(mean_duration)
View(mean_duration)
mean_duration
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot() +
scale_y_continuous(limits = c(0,20000))
mean_duration
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Average trip duration for scooter each supplier",
subtitle =" Without Outliers"
) +
coord_cartesian(ylim = quantile(Trip.Duration, c(0.1, 0.9)))
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Average trip duration for scooter each supplier",
subtitle =" Without Outliers"
) +
coord_cartesian(ylim = quantile(data$Trip.Duration, c(0.1, 0.9)))
mean_duration
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Average trip duration for scooter each supplier",
subtitle ="Without Outliers"
) +
coord_cartesian(ylim = quantile(data$Trip.Duration, c(0.1, 0.95)))
mean_duration
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Average trip duration for scooter each supplier",
subtitle ="Without Outliers"
) +
coord_cartesian(ylim = quantile(data$Trip.Duration, c(0.1, 0.92)))
mean_duration
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Average trip duration for scooter each vendor",
subtitle ="Without Outliers"
) +
coord_cartesian(ylim = quantile(data$Trip.Duration, c(0.1, 0.92)))
mean_duration
mean_duration= data |>
ggplot(aes(x=Vendor, y=Trip.Duration, fill=Vendor)) +
geom_boxplot(outlier.shape = NA) +
labs(title = "Average trip duration for scooter each vendor",
subtitle ="Without Outliers"
) +
coord_cartesian(ylim = quantile(data$Trip.Duration, c(0.1, 0.92)))
mean_duration
ggsave(filename = "mean_duration_for_vendor.png", plot=mean_duration,path=here('graphics'))
data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
flextable()
commum_travel_trajetory = data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
head(10) |>
flextable()
commum_travel_trajetory
common_travel_trajectory = data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
head(10) |>
flextable()
save_as_image(commum_travel_trajetory, path=here("graphics/common_travel_trajectory.png"))
save_as_image(commum_travel_trajetory, path=here("graphics/common_travel_trajectory.jpeg"))
library(networkD3)
install.packages('networkD3')
library(networkD3)
# netwoek viz  -----------------------------------
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
nodes
# netwoek viz  -----------------------------------
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
data_trajectory_10 = data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
head(10)
nodes <- data.frame(
name=c(as.character(data_trajectory_10$Start.Community.Area.Name),
as.character(data_trajectory_10$End.Community.Area.Name)) %>% unique()
)
nodes
data_trajectory_10$IDsource <- match(data_trajectory_10$Start.Community.Area.Name, nodes$name)-1
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name)-1
data_trajectory_10
data_trajectory_10
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "Start of Travel", Target = "End of Travel",
Value = "total", NodeID = "name",
sinksRight=FALSE)
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "Start.Community.Area.Name", Target = "End.Community.Area.Name",
Value = "total", NodeID = "name",
sinksRight=FALSE)
p
p
View(p)
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "Start.Community.Area.Name", Target = "End.Community.Area.Name",
Value = "total", NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "Start.Community.Area.Name", Target = "End.Community.Area.Name",
Value = "total", NodeID = "name",
sinksRight=TRUE)
p
links <- data.frame(
source=c("group_A","group_A", "group_B", "group_C", "group_C", "group_E"),
target=c("group_C","group_D", "group_E", "group_F", "group_G", "group_H"),
value=c(2,3, 2, 3, 1, 3)
)
# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique()
)
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
nodes
links
data_trajectory_10 = data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
head(10)
nodes <- data.frame(
name=c(as.character(data_trajectory_10$Start.Community.Area.Name),
as.character(data_trajectory_10$End.Community.Area.Name)) |>
unique()
)
data_trajectory_10$IDsource <- match(data_trajectory_10$Start.Community.Area.Name, nodes$name)-1
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name)-1
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=TRUE)
p
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=TRUE)
p
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
p
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE,  nodeWidth=40, fontSize=13, nodePadding=20)
p
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=T,  nodeWidth=40, fontSize=13, nodePadding=20)
p
# Make the Network
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=F,  nodeWidth=40, fontSize=13, nodePadding=20)
p
ColourScal ='d3.scaleOrdinal() .range(["#FDE725FF","#B4DE2CFF","#6DCD59FF","#35B779FF","#1F9E89FF","#26828EFF","#31688EFF","#3E4A89FF","#482878FF","#440154FF"])'
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=F,colourScale = ColourScal,   nodeWidth=40, fontSize=13, nodePadding=20)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=TRUE)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=FALSE)
p
data_trajectory_10 = data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=log10(n()),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
head(10)
nodes <- data.frame(
name=c(as.character(data_trajectory_10$Start.Community.Area.Name),
as.character(data_trajectory_10$End.Community.Area.Name)) |>
unique()
)
nodes
data_trajectory_10$IDsource <- match(data_trajectory_10$Start.Community.Area.Name, nodes$name)-1
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name)-1
data_trajectory_10
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=FALSE)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=T)
p
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name)
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=T)
p
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name) -1
data_trajectory_10
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=T)
p
data_trajectory_10 = data |> na.omit() |>
group_by(Start.Community.Area.Name,End.Community.Area.Name) |>
summarise(total=n(),meanDuration=mean(Trip.Duration),meanDistance=mean(Trip.Distance)) |>
arrange(desc(total)) |>
head(10)
nodes <- data.frame(
name=c(as.character(data_trajectory_10$Start.Community.Area.Name),
as.character(data_trajectory_10$End.Community.Area.Name)) |>
unique()
)
nodes
data_trajectory_10$IDsource <- match(data_trajectory_10$Start.Community.Area.Name, nodes$name)-1
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name) -1
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=T)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=F)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=F, nodeWidth=40, fontSize=13, nodePadding=20)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=F, nodeWidth=10, fontSize=13, nodePadding=20)
p
nodes <- data.frame(
name=c(as.character(data_trajectory_10$Start.Community.Area.Name),
tolower(as.character(data_trajectory_10$End.Community.Area.Name))) |>
unique()
)
nodes
data_trajectory_10$IDsource <- match(data_trajectory_10$Start.Community.Area.Name, nodes$name)-1
data_trajectory_10$IDtarget <- match(data_trajectory_10$End.Community.Area.Name, nodes$name) -1
data_trajectory_10
nodes <- data.frame(
name=c(as.character(data_trajectory_10$Start.Community.Area.Name),
tolower(as.character(data_trajectory_10$End.Community.Area.Name))) |>
unique()
)
nodes
data_trajectory_10$IDsource <- match(data_trajectory_10$Start.Community.Area.Name, nodes$name)-1
data_trajectory_10$IDtarget <- match(tolower(data_trajectory_10$End.Community.Area.Name), nodes$name) -1
data_trajectory_10
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=F, nodeWidth=10, fontSize=13, nodePadding=20)
p
data_trajectory_10$IDtarget <- match(tolower(data_trajectory_10$End.Community.Area.Name), nodes$name) -1 |>  toupper()
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = toupper(nodes),
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=F, nodeWidth=10, fontSize=13, nodePadding=20)
data_trajectory_10$IDtarget <- match(tolower(data_trajectory_10$End.Community.Area.Name), nodes$name) -1
data_trajectory_10
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=F, nodeWidth=10, fontSize=13, nodePadding=20)
p
p <- sankeyNetwork(Links = data_trajectory_10, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "total", NodeID = "name",
sinksRight=T, nodeWidth=10, fontSize=13, nodePadding=20)
p
